"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { auth, db } from "@/lib/firebase";
import { onAuthStateChanged, User } from "firebase/auth";
import { collection, getDocs, doc, getDoc } from "firebase/firestore";

type FeatureLink = {
  name: string;
  href: string;
  description: string;
  details: string;
  image: string;
};

const features: FeatureLink[] = [
  {
    name: "Threat Reports",
    href: "/Home/Posts",
    description: "View and submit verified threat reports.",
    details:
      "A community-driven hub where people openly share stories of attempted scams, phishing emails, and fraud targeting them. Users can also submit their own reports, which others can read and learn from. This creates a living feed of threats that makes staying informed easier and more personal.",
    image: "report.jpg",
  },
  {
    name: "Verify Threat",
    href: "/Home/Verify",
    description: "Check the authenticity of suspicious messages or emails.",
    details:
      "An AI-powered threat analysis tool designed to evaluate suspicious links, texts, or emails in seconds. It provides a clear risk score, highlights the warning signs, and gives a concise summary of why the content may be harmful. Users gain fast, actionable insights without needing technical expertise.",
    image: "verify.webp",
  },
  {
    name: "Cyber Intel",
    href: "/Home/News",
    description: "Stay updated with latest cybersecurity news.",
    details:
      "A real-time stream of cybersecurity updates that keeps users informed about global cyber incidents, new scams, and data breaches. The feature focuses on providing short, reliable, and relevant news items. It ensures that individuals and organizations remain prepared against fast-evolving digital threats affecting their everyday lives.",
    image: "news.jpg",
  },
  {
    name: "Threat Map",
    href: "/Home/Map",
    description: "Visualize threat locations and trends worldwide.",
    details:
      "An interactive visualization that highlights recent reports of scams and cyberattacks on a global map. Each marker represents a case submitted by the community or sourced from intelligence feeds. By exploring it, users gain awareness of regional risks and see how threats spread across borders in real time.",
    image: "/map.png",
  },
  {
    name: "Phish Finder",
    href: "/Home/phish-finder",
    description: "Detect phishing attempts and unsafe URLs.",
    details:
      "An interactive learning game that challenges users to identify whether emails are genuine or malicious. It mixes safe and harmful messages, many generated by AI but based on real-world datasets. By practicing in this sandbox, users sharpen their ability to recognize phishing attempts in everyday communication.",
    image: "/phish.jpeg",
  },
  {
    name: "WhatsApp AI Bot",
    href: "/Home/WhatsAppBot",
    description: "Forward suspicious messages and get instant analysis.",
    details:
      "A convenient chatbot that works directly inside WhatsApp. Users can forward suspicious messages, and the bot will analyze them instantly, summarize possible risks, and provide a confidence score. It also suggests next steps, such as reporting scams to trusted portals, making cybersecurity guidance accessible in daily conversations.",
    image: "wap.jpg",
  },
];

type Report = {
  id: string;
  title: string;
  description: string;
  userType?: string;
  tags?: string[];
};

export default function HomePage() {
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [userType, setUserType] = useState<string | null>(null);
  const [posts, setPosts] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [tips, setTips] = useState<string[]>([]);
  const [location, setLocation] = useState<string>("Unknown");

  // Fetch user type, posts and AI tips
  useEffect(() => {
    const fetchData = async () => {
      onAuthStateChanged(auth, async (user) => {
        setCurrentUser(user);

        if (user) {
          try {
            const userDoc = await getDoc(doc(db, "users", user.uid));
            const type = userDoc.exists() ? userDoc.data().type : "unknown";
            setUserType(type);

            // Fetch posts
            const querySnapshot = await getDocs(collection(db, "scamReports"));
            const allReports: Report[] = [];
            querySnapshot.forEach((doc) => {
              const data = doc.data();
              allReports.push({
                id: doc.id,
                title: data.title,
                description: data.description,
                userType: data.userType,
                tags: data.tags || [],
              });
            });

            const filtered = allReports
              .filter((r) => r.userType === type)
              .sort((a, b) => b.id.localeCompare(a.id))
              .slice(0, 2);

            const staticPosts: Report[] = [
              {
                id: "static1",
                title: "Stay Alert for Phishing Emails",
                description:
                  "Never click on unknown links. Always verify the sender before sharing personal information.",
              },
              {
                id: "static2",
                title: "Avoid Fake Investment Scams",
                description:
                  "High-return investment schemes may be scams. Research and verify before sending money.",
              },
            ];

            setPosts(filtered.length > 0 ? filtered : staticPosts);

            // Get browser location
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(
                (pos) =>
                  setLocation(`${pos.coords.latitude},${pos.coords.longitude}`),
                () => setLocation("Unknown")
              );
            }

            // Call Gemini API directly
            const response = await fetch(
              "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "X-goog-api-key": process.env.NEXT_PUBLIC_GOOGLE_API_KEY!,
                },
                body: JSON.stringify({
                  contents: [
                    {
                      parts: [
                        {
                          text: `Generate 3 short, concise and specific fraud and scam safety tips for a ${type} located at ${location}. Use bullet points and plain language. Start with heres what the user type located at location(guess the city and state) must be aware of.`,
                        },
                      ],
                    },
                  ],
                })
              }
            );

            const data = await response.json();
            const generatedTips =
              data.candidates?.[0]?.content?.parts?.[0]?.text
                .split("\n")
                .filter((t: string) => t.trim() !== "") || [];

            setTips(generatedTips);
          } catch (err) {
            console.error(err);
            setPosts([]);
            setTips([]);
          }
        }

        setLoading(false);
      });
    };

    fetchData();
  }, [location]);

  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-br from-blue-900 via-teal-900 to-green-900 text-white">
      <div className="max-w-6xl mx-auto px-4 flex-1 py-10 space-y-10">
        {/* Combined Card */}
        <div className="bg-black/50 backdrop-blur-sm border border-cyan-500/20 rounded-2xl p-6 flex flex-col md:flex-row gap-6 shadow-lg">
          {/* Left: Welcome + AI Tips */}
          <div className="flex-1">
            <h2 className="text-3xl font-bold text-cyan-400 mb-2">
              Welcome {currentUser?.displayName || currentUser?.email || "User"}!
            </h2>
            <p className="text-gray-200 mb-4">
              Hereâ€™s what <span className="text-cyan-300 font-bold">{userType}</span> must know to stay secure online:
            </p>

            <div className="bg-black/60 border border-cyan-500/30 rounded-xl p-4 shadow-md flex flex-col gap-2">
              <h3 className="text-cyan-300 font-semibold flex items-center gap-2">
                ðŸ’¡ AI Tips
              </h3>
              <ul className="list-disc list-inside text-gray-100 space-y-1">
                {tips.length > 0 ? (
                  tips.map((tip, idx) => <li key={idx}>{tip}</li>)
                ) : (
                  <li>Loading AI tips...</li>
                )}
              </ul>
            </div>
          </div>

          {/* Right: Recent Posts */}
          <div className="flex-1 space-y-4">
            <h3 className="text-2xl font-bold text-cyan-400 mb-2">
              Hereâ€™s what other <span className="text-cyan-300 font-bold">{userType}</span> are currently facing:
            </h3>
            {loading ? (
              <p>Loading posts...</p>
            ) : (
              posts.map((post) => (
                <div
                  key={post.id}
                  className="bg-black/60 border border-cyan-500/20 rounded-xl p-4 shadow-md hover:shadow-cyan-500/40 transition-all"
                >
                  <h4 className="text-xl font-semibold text-cyan-300 mb-2">{post.title}</h4>
                  <p className="text-gray-100">{post.description}</p>
                  {post.tags && post.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2 mt-2">
                      {post.tags.map((tag, idx) => (
                        <span
                          key={idx}
                          className="bg-gradient-to-r from-cyan-700 to-green-700 text-cyan-100 px-3 py-1 rounded-full text-sm shadow-md"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        </div>

        {/* Features */}
        <div className="space-y-10">
          <h2 className="text-3xl font-bold text-cyan-400 mb-4">What CyberAtlas Does</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {features.map((feature, idx) => (
              <div
                key={idx}
                className="bg-black/50 backdrop-blur-sm border border-cyan-500/20 p-6 rounded-xl shadow-lg hover:shadow-cyan-500/40 transition-all flex flex-col items-center gap-4"
              >
                <img
                  src={feature.image}
                  alt={feature.name}
                  className="w-full h-48 md:h-64 object-cover rounded-xl border border-cyan-500/30 shadow-md"
                />
                <div className="text-center">
                  <h3 className="text-2xl md:text-3xl font-bold text-cyan-300 mb-2">{feature.name}</h3>
                  <p className="text-gray-200 mb-4">{feature.details}</p>
                  <Link
                    href={feature.href}
                    className="inline-block px-5 py-2 bg-gradient-to-r from-cyan-500 to-green-500 hover:from-cyan-400 hover:to-green-400 text-gray-900 font-semibold rounded-xl shadow-lg transition-all"
                  >
                    Explore {feature.name}
                  </Link>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-[#0a0a0a] text-gray-300 w-full border-t border-cyan-500/20">
        <div className="max-w-7xl mx-auto px-6 py-4 flex flex-col md:flex-row justify-between items-center gap-2">
          <p className="text-center md:text-left text-sm">
            Made for Codefury 8.0 Hackathon by <strong>Aditya Swadi</strong> â€” <a href="mailto:swadiaditya@gmail.com" className="underline">swadiaditya@gmail.com</a> & <strong>Afnaan Ayub</strong> â€” <a href="mailto:connectafnaan67@gmail.com" className="underline">connectafnaan67@gmail.com</a>
          </p>
        </div>
      </footer>
    </div>
  );
}
